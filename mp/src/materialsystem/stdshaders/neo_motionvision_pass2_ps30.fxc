#include "common_ps_fxc.h"

sampler MotionEffect			: register(s0);
sampler Original				: register(s1);
sampler MVGrad	         	   	: register(s2);
sampler NoiseTexture            : register(s3);

const float g_Brightness		: register(c0);
const float g_XNoiseOffset		: register(c1);
const float g_YNoiseOffset		: register(c2);
const float g_XOffset			: register(c3);
const float g_XMultiplier		: register(c4);

struct PS_INPUT
{
	HALF2 vTexCoord	: TEXCOORD0;
};

float4 main( const PS_INPUT i ) : COLOR
{
	const float4 imTex = tex2D(Original, i.vTexCoord);
	const float noise =  0.95 + (tex2D(NoiseTexture, i.vTexCoord + float2(g_XNoiseOffset, g_YNoiseOffset))/20);
	const float bwTint = (imTex.r * 0.3 + imTex.g * 0.59 + imTex.b * 0.11) * noise;
	float3 output = (bwTint + 0.0125);
	const float4 gradient = tex2D( MVGrad, float2(min(1.0, (bwTint + g_XOffset) + ((bwTint - g_XOffset) * g_XMultiplier)), 0.5));
	output += bwTint * gradient.rgb;
	output *= g_Brightness;
	return float4(output, imTex.a);

	// NEO TODO (Adam) Awesome sincity shader taken from https://pastebin.com/zVxsZBVG , useful for potential motion vision rework discussion
	//const float4 imTex = tex2D(Original, i.vTexCoord);
	//float3 colorin = pow(imTex.rgb, .45f);
    //float3 bwcolor = dot(colorin.rgb, 1.f.xxx) * 0.33333f;
	//float weight = smoothstep(0.1f, 0.25f, colorin.r - bwcolor);
	//bwcolor = pow(bwcolor * 1.1f, 2.f);
	//float3 colorout = lerp(bwcolor, colorin * float3(1.1f, 0.5f, 0.5f), weight);
    //return pow(float4(colorout, 1.f), 2.2f);
}